// --------------------------------------------------------
// Code generated by Papyrus Java
// --------------------------------------------------------

package Session;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.json.JSONArray;
import org.json.JSONObject;

import jdk.nashorn.internal.parser.JSONParser;

/************************************************************/
/**
 * 
 */
public class Classe extends SqlUtils {
	/**
	 * 
	 */
	// test commit

	private String id;
	/**
	 * 
	 */
	private int promotion;
	/**
	 * 
	 */
	private String filiere;
	/**
	 * 
	 */
	public Personne[] personne;

	/**
	 * 
	 * @param id
	 * @param promotion
	 * @param filiere
	 */
	public Classe(String id, int promotion, String filiere) {
		this.id = id;
		this.promotion = promotion;
		this.filiere = filiere;
	}

	public void save() {
		this.connect();
		this.requestUpdate(String.format("INSERT INTO CLASSE VALUES('%s',%s,'%s')", this.id,
				String.valueOf(this.promotion), this.filiere));
		this.disconnect();
		URL url;
		try {
			url = new URL ("http://06ba42c7.ngrok.io/manipulClasse/create/newClasse/");
			HttpURLConnection con;
			try {
				con = (HttpURLConnection)url.openConnection();
				con.setRequestMethod("POST");
				con.setRequestProperty("Content-Type", "application/json; utf-8");
				con.setRequestProperty("Accept", "application/json");
				con.setDoOutput(true);
				String jsonInputString = "{ \"id\" : \""+id+"\", \"promotion\" : \""+promotion+"\", \"filiere\" : \""+filiere+"\"}";
				try(OutputStream os = con.getOutputStream()) {
				    byte[] input = jsonInputString.getBytes("utf-8");
				    os.write(input, 0, input.length);           
				}
				try(BufferedReader br = new BufferedReader(
						  new InputStreamReader(con.getInputStream(), "utf-8"))) {
						    StringBuilder response = new StringBuilder();
						    String responseLine = null;
						    while ((responseLine = br.readLine()) != null) {
						        response.append(responseLine.trim());
						    }
						    System.out.println(response.toString());
						}
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
		} catch (MalformedURLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public void update() {
		this.connect();
		this.requestUpdate(String.format("UPDATE CLASSE SET promotion=%s,filiere='%s' WHERE id='%s'",
				String.valueOf(this.promotion), this.filiere, this.id));
		this.disconnect();
	}

	public void delete() {
		this.connect();
		this.requestUpdate(String.format("DELETE FROM CLASSE WHERE id='%s'", this.id));
		this.disconnect();
		URL url;
		try {
			url = new URL ("http://06ba42c7.ngrok.io/manipulClasse/delete/deleteClasse/");
			HttpURLConnection con;
			try {
				con = (HttpURLConnection)url.openConnection();
				con.setRequestMethod("DELETE");
				con.setRequestProperty("Content-Type", "application/json; utf-8");
				con.setRequestProperty("Accept", "application/json");
				con.setDoOutput(true);
				String jsonInputString = "{ \"UUID\" : \""+id+"\"}";
				try(OutputStream os = con.getOutputStream()) {
				    byte[] input = jsonInputString.getBytes("utf-8");
				    os.write(input, 0, input.length);           
				}
				try(BufferedReader br = new BufferedReader(
						  new InputStreamReader(con.getInputStream(), "utf-8"))) {
						    StringBuilder response = new StringBuilder();
						    String responseLine = null;
						    while ((responseLine = br.readLine()) != null) {
						        response.append(responseLine.trim());
						    }
						    System.out.println(response.toString());
						}
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
		} catch (MalformedURLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	public static Classe getById(String id) {
		URL url;
		try {
			url = new URL ("http://06ba42c7.ngrok.io/manipulClasse/get/getClasse");
			HttpURLConnection con;
			try {
				con = (HttpURLConnection)url.openConnection();
				
				con.setRequestProperty("Content-Type", "application/json; utf-8");
				con.setRequestProperty("Accept", "application/json");


			    
				con.setRequestMethod("GET");
				StringBuilder response = new StringBuilder();
				try(BufferedReader br = new BufferedReader(
						  new InputStreamReader(con.getInputStream(), "utf-8"))) {
						    
						    String responseLine = null;
						    while ((responseLine = br.readLine()) != null) {
						        response.append(responseLine.trim());
						    }
						}
				JSONArray obj = new JSONArray(response.toString());
				
				for (int i = 0; i < obj.length(); ++i) {
					if(obj.getJSONObject(i).getString("id").equals(id)){
					Classe classe = new Classe(obj.getJSONObject(i).getString("id"), obj.getJSONObject(i).getInt("promotion"), obj.getJSONObject(i).getString("filiere"));
					return classe;
					}
				}
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
		} catch (MalformedURLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		
			return null;
		
		
	}

	@Override
	public String toString() {
		return "" + id + " ; " + promotion + " ; " + filiere + " \n";
	}

	public static List<Classe> getAll() {
	
		List<Classe> result = new ArrayList<Classe>();

		URL url;
		try {
			url = new URL ("http://e0aa4a44.ngrok.io/manipulClasse/get/getClasse");
			HttpURLConnection con;
			try {
				con = (HttpURLConnection)url.openConnection();
				
				con.setRequestProperty("Content-Type", "application/json; utf-8");
				con.setRequestProperty("Accept", "application/json");


			    
				con.setRequestMethod("GET");
				StringBuilder response = new StringBuilder();
				try(BufferedReader br = new BufferedReader(
						  new InputStreamReader(con.getInputStream(), "utf-8"))) {
						    
						    String responseLine = null;
						    while ((responseLine = br.readLine()) != null) {
						        response.append(responseLine.trim());
						    }
						}
				JSONArray obj = new JSONArray(response.toString());
				
				for (int i = 0; i < obj.length(); ++i) {
					
					Classe classe = new Classe(obj.getJSONObject(i).getString("id"), obj.getJSONObject(i).getInt("promotion"), obj.getJSONObject(i).getString("filiere"));
					
					result.add(classe);
				}
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
		} catch (MalformedURLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return result;
		
	}

	public String getId() {
		return id;
	}

	public void setId(String id) {
		this.id = id;
	}

	public int getPromotion() {
		return promotion;
	}

	public void setPromotion(int promotion) {
		this.promotion = promotion;
	}

	public String getFiliere() {
		return filiere;
	}

	public void setFiliere(String filiere) {
		this.filiere = filiere;
	}

	public Personne[] getPersonne() {
		return personne;
	}

	public void setPersonne(Personne[] personne) {
		this.personne = personne;
	}
};
